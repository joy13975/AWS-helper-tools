#!/bin/bash
echo AWS_PROFILE is $AWS_PROFILE

role_profile=$1
echo role_profile is $role_profile
if [ -z $role_profile ]; then
    echo Must specify first argument for "role_profile"
    return 1
fi

[ ! -z $(aws configure list-profiles | grep -F -e $role_profile) ]
has_no_role_profile=$?  # bash 0 is "success"

_get_from_config() {
    if [ $has_no_role_profile -eq 1 ]; then
        return
    fi
    aws configure --profile $role_profile get $1
}

role_arn=${ROLE_ARN:-$(_get_from_config role_arn)}

if [ -z $role_arn ]; then
    echo No role_arn found in profile "${role_profile}"
    return 1
fi

mfa_arn=${MFA_ARN:-$(_get_from_config mfa_arn)}
session_name=${${SESSION_NAME:-$(_get_from_config role_session_name)}:-"temp-session"}
duration=${${DURATION:-$(_get_from_config duration_seconds)}:-3600}

endpoint_url=$(_get_from_config endpoint_url)

_make_optional_arg() {
    flag=$1
    value=$2
    if [ -z "$value" ]; then
        echo ''
    else
        echo $flag $value
    fi
}
endpoint_arg=$(_make_optional_arg --endpoint-url $endpoint_url)
region=${REGION:-$(_get_from_config region)}
region_arg=$(_make_optional_arg --region $region)

if [ ! -z $mfa_arn ]; then
    echo -n "Enter MFA code for device $mfa_arn: "
    read mfa_code
    echo ""
    echo "MFA Code: ${mfa_code}"
    mfa_arg="--serial-number $mfa_arn --token-code $mfa_code"
else
    echo 'MFA_ARN is empty - not using MFA!'
    mfa_code=''
    mfa_arg=''
fi

cmd=$(echo "aws sts assume-role \
    $region_arg \
    --role-arn $role_arn \
    --role-session-name $session_name \
    --duration-second $duration \
    $endpoint_arg \
    $mfa_arg" | tr -s ' '
)

echo $cmd
output=$(eval $cmd)
if [ $? -ne 0 ]; then
    echo $output
    echo
    echo 'Something went wrong...'
    return 1
fi

_jq_get() {
    echo $output | jq -r .Credentials.$1
}

export AWS_ACCESS_KEY_ID=$(_jq_get AccessKeyId)
export AWS_SECRET_ACCESS_KEY=$(_jq_get SecretAccessKey)
export AWS_SESSION_TOKEN=$(_jq_get SessionToken)

if [[ $SHOW == 1 ]]; then
	echo "# Linux env vars:"
    echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID"
    echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY"
    echo "export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN"
    echo

	echo "# Snowflake credentials:"
    echo -e "CREDENTIALS=(
        AWS_KEY_ID='$AWS_ACCESS_KEY_ID'
        AWS_SECRET_KEY='$AWS_SECRET_ACCESS_KEY'
        AWS_TOKEN='$AWS_SESSION_TOKEN')"
fi
